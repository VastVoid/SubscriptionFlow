@page "/payment/confirm"
@using Application.Services.Abstractions
@using Application.StateMachines
@using Application.StateMachines.Managers
@using Domain.Entities
@using Microsoft.AspNetCore.Authorization
@using SubscriptionAutomaton.Common.Services
@using SubscriptionAutomaton.Common.Simulation
@using SubscriptionAutomaton.Models.ViewModels
@rendermode InteractiveServer
@attribute [Authorize]

@inject ISubscriptionsService subscriptionsService
@inject NavigationManager navigationManager
@inject CurrentSubscriptionService currentSubscriptionService
@inject CalendarSimulator calendarSimulator

<link rel="stylesheet" href="payment.css" />

<h3>Подтверждение оплаты</h3>

<div class="card-container">
    <div class="card">
        <EditForm Model="Model" OnValidSubmit="ProcessPayment" FormName="PaymentForm">
            <DataAnnotationsValidator />
            <div class="card-content">
                <div class="input-group">
                    <label for="cardNumber">Номер карты</label>
                    <InputText @bind-Value="Model.CardNumber" placeholder="1234 5678 9876 5432"/>
                    <ValidationMessage For="() => Model.CardNumber" />
                </div>
                <div class="input-group">
                    <label for="cardName">Владелец карты</label>
                    <InputText @bind-Value="Model.CardName" placeholder="Имя Фамилия" />
                </div>
                <div class="input-group-row">
                    <div class="input-group">
                        <label for="expiryDate">Срок действия</label>
                        <InputText @bind-Value="Model.ExpiryDate" placeholder="MM/YY" />
                    </div>

                    <div class="input-group">
                        <label for="cvv">CVV</label>
                        <InputText @bind-Value="Model.Cvv" placeholder="123" />
                    </div>
                </div>
                <button type="submit">Оплатить</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private SubscriptionManager? subscriptionManager;
    private Subscription? subscription;

    [SupplyParameterFromForm]
    public PaymentViewModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        subscription = await currentSubscriptionService.GetAsync();
        var state = (SubscriptionStateMachine.State)subscription!.SubscriptionStateId;
        subscriptionManager = new SubscriptionManager(new SubscriptionStateMachine(state));
        if (!subscriptionManager.NeedPay)
        {
            RedirectToHome();
        }
        subscriptionManager.StateMachine.Fire(SubscriptionStateMachine.Trigger.InitPayment);
    }

    private async void ProcessPayment()
    {
        subscriptionManager.StateMachine.Fire(SubscriptionStateMachine.Trigger.SuccessPayment);
        subscriptionManager.StateMachine.Fire(SubscriptionStateMachine.Trigger.ActivateSubscription);
        var newState = subscriptionManager.StateMachine.CurrentState;

        subscription.ExpiredAt = calendarSimulator.GetCurrentDateTime().AddDays(30);
        subscription.SubscriptionStateId = (short)newState;
        await subscriptionsService.UpdateAsync(subscription);

        RedirectToHome();
    }

    private void RedirectToHome()
    {
        navigationManager.NavigateTo("/");
    }
    }
