@page "/"
@using System.Runtime.CompilerServices
@using Application.Services.Abstractions
@using Application.StateMachines
@using Application.StateMachines.Managers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using SubscriptionAutomaton.Common.Services

@inject ISubscriptionsService subscriptionsService
@inject CurrentSubscriptionService currentSubscriptionService
@inject NavigationManager navigationManager

@rendermode InteractiveServer
@attribute [Authorize]

<style>
    .subscription-status-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: url('/path-to-background-image') no-repeat center center fixed;
        background-size: cover;
    }

    .subscription-content {
        text-align: center;
        background-color: rgba(255, 255, 255, 0.8); /* Полупрозрачный фон для контента */
        padding: 20px;
        border-radius: 10px;
    }

        .subscription-content img {
            max-width: 300px;
            height: auto;
            margin-bottom: 15px;
        }

</style>

<div class="subscription-status-container">
    @if(subscriptionManager is not null)
    {
        @if (subscriptionManager.NeedRegistration)
        {
            <SubscriptionStatus ImagePath="images/success.png"
                                Message="Необходимо завершить регистрацию."
                                ButtonText="Завершить регистрацию"
                                OnButtonClick="CompleteRegistration" />
        }
        @if (subscriptionManager.CanSelectPlan)
        {
            <SubscriptionStatus ImagePath="images/fail.png"
                                Message="Регистрация завершена успешно. Выберите тарифный план."
                                ButtonText="Выбрать план"
                                ShowErrorMessage="true"
                                OnButtonClick="SelectPlan" />
        }
        @if (subscriptionManager.NeedPay)
        {
            <SubscriptionStatus ImagePath="images/fail.png"
                                Message="Завершите оплату для продолжения."
                                ButtonText="Завершить оплату"
                                OnButtonClick="CompletePayment" />
        }
        @if (subscriptionManager.IsSubscriptionActive)
        {
            <SubscriptionStatus ImagePath="images/success.png"
                                Message="Ваша активна!"
                                ButtonText="Подписка истекла"
                                OnButtonClick="() => {}" />
        }
        @if (subscriptionManager.IsSubscriptionExpired)
        {
            <SubscriptionStatus ImagePath="images/fail.png"
                                Message="Ваша подписка истекла. Возобновите подписку."
                                ButtonText="Подписка истекла"
                                OnButtonClick="RenewSubscription" />
        }
    }
</div>

@code {
    private SubscriptionManager? subscriptionManager { get; set; }
    private Domain.Entities.Subscription? subscription { get; set; }

    protected override async Task OnInitializedAsync()
    {
        subscription = await currentSubscriptionService.GetAsync();
        var state = (SubscriptionStateMachine.State)subscription!.SubscriptionStateId;
        subscriptionManager = new SubscriptionManager(new SubscriptionStateMachine(state));
    } 

    private async Task CompleteRegistration()
    {
        subscriptionManager!.StateMachine.Fire(SubscriptionStateMachine.Trigger.Register);
        subscription!.SubscriptionStateId = (short)subscriptionManager.StateMachine.CurrentState;
        await subscriptionsService.UpdateAsync(subscription);
    }

    private void SelectPlan()
    {
        navigationManager.NavigateTo("plan-selection");
    }

    private void CompletePayment()
    {
        navigationManager.NavigateTo("/payment/confirm");
    }

    private Task RenewSubscription()
    {
        // Логика возобновления подписки
        return Task.CompletedTask;
    }
}
